/*
 * Copyright (C) 2016 Jared Rummler
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.pickerx.material.spinner

import android.content.Context
import android.graphics.BlendMode
import android.graphics.BlendModeColorFilter
import android.graphics.Color
import android.graphics.PorterDuff
import android.graphics.drawable.Drawable
import android.os.Build
import android.view.View
import androidx.core.content.res.ResourcesCompat
import androidx.recyclerview.widget.DiffUtil
import kotlin.math.max

internal val MIN_SKD_JELLY_BEAN_MR1 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1

fun <T> diff(oldList: List<T>, newList: List<T>, compare: (T, T) -> Boolean): DiffUtil.DiffResult {
    val cb = object : DiffUtil.Callback() {
        override fun getOldListSize(): Int = oldList.size

        override fun getNewListSize(): Int = newList.size

        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
            return oldList[oldItemPosition] == newList[newItemPosition]
        }

        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
            val a = oldList[oldItemPosition]
            val b = newList[newItemPosition]
            return compare.invoke(a, b)
        }
    }
    return DiffUtil.calculateDiff(cb)
}

internal infix fun Drawable.setColorFilterSrcIn(color: Int) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        colorFilter = BlendModeColorFilter(color, BlendMode.SRC_IN)
    } else {
        @Suppress("DEPRECATION")
        setColorFilter(color, PorterDuff.Mode.SRC_IN)
    }
}

/**
 * Darkens a color by a given factor.
 *
 * @param color the color to darken
 * @param factor The factor to darken the color.
 * @return darker version of specified color.
 */
internal fun darker(color: Int, factor: Float): Int {
    return Color.argb(
        Color.alpha(color),
        max((Color.red(color) * factor).toInt(), 0),
        max((Color.green(color) * factor).toInt(), 0),
        max((Color.blue(color) * factor).toInt(), 0)
    )
}

/**
 * Lightens a color by a given factor.
 *
 * @param color The color to lighten
 * @param factor The factor to lighten the color. 0 will make the color unchanged. 1 will make the
 * color white.
 * @return lighter version of the specified color.
 */
internal fun lighter(color: Int, factor: Float): Int {
    val red = ((Color.red(color) * (1 - factor) / 255 + factor) * 255).toInt()
    val green = ((Color.green(color) * (1 - factor) / 255 + factor) * 255).toInt()
    val blue = ((Color.blue(color) * (1 - factor) / 255 + factor) * 255).toInt()
    return Color.argb(Color.alpha(color), red, green, blue)
}

/**
 * Check if layout direction is RTL
 *
 * @param context the current context
 * @return `true` if the layout direction is right-to-left
 */
fun isRtl(context: Context): Boolean {
    return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1
            && context.resources.configuration.layoutDirection == View.LAYOUT_DIRECTION_RTL)
}

/**
 * Return a drawable object associated with a particular resource ID.
 *
 *
 * Starting in [android.os.Build.VERSION_CODES.LOLLIPOP], the returned drawable will be styled for the
 * specified Context's theme.
 *
 * @param id The desired resource identifier, as generated by the aapt tool.
 * This integer encodes the package, type, and resource entry.
 * The value 0 is an invalid identifier.
 * @return Drawable An object that can be used to draw this resource.
 */
internal fun getDrawable(context: Context, id: Int): Drawable? {
    return ResourcesCompat.getDrawable(context.resources, id, null)
}
